library(gridExtra)
# 定义绘制箱线图的函数，修改颜色方案
draw_ggboxplot <- function(data, Module = "Module", group = "group") {
ggboxplot(data, x = group, y = Module,
ylab = paste0(Module),
xlab = group,
fill = group,
palette = c("#00AFBB", "#E7B800", "#FC4E07"), # 自定义颜色方案
legend = "") + stat_compare_means() # 添加统计比较
}
# 计算模块与表型的相关性，用于选择前10个模块
moduleTraitCor <- cor(MEs, design, use = "p")
nashIndex <- which(colnames(design) == "NASH")
moduleTraitCor_NASH <- moduleTraitCor[, nashIndex, drop = FALSE]
# 排序并选择与 NASH 相关性绝对值最高的前10个模块
topModules <- order(abs(moduleTraitCor_NASH), decreasing = TRUE)[1:10]
colorNames <- names(MEs)[topModules] # 获取前10个模块的名称
# 输出前10模块的箱线图
svg("D:\\metabolic network\\转录组\\step4_Module-trait-relationship_boxplot_NASH_TOP10.svg",
width = 15,
height = 1.6 * length(topModules))
p <- lapply(colorNames, function(x) {
draw_ggboxplot(mes_group, Module = x, group = "group")
})
do.call(grid.arrange, c(p, ncol = 2)) # 每行排布2个图
dev.off()
}
### 模块与表型的相关性boxplot图
if(T){
mes_group <- merge(MEs,datTraits_1,by="row.names")
library(gplots)
library(ggpubr)
library(grid)
library(gridExtra)
draw_ggboxplot <- function(data,Module="Module",group="group"){
ggboxplot(data,x=group, y=Module,
ylab = paste0(Module),
xlab = group,
fill = group,
palette = "jco",
#add="jitter",
legend = "") +stat_compare_means()
}
# 批量画boxplot
colorNames <- names(MEs)
pdf("D:\\metabolic network\\转录组\\step4_Module-trait-relationship_boxplot_stage.pdf", width = 15,height = 1.6*ncol(MEs))
p <- lapply(colorNames,function(x) {
draw_ggboxplot(mes_group, Module = x, group = "group")
})
do.call(grid.arrange,c(p,ncol=2)) #排布为每行2个
dev.off()
}
# 选择离散性状的表型
levels(datTraits_1$group)
choose_group <- "NASH"
if(T){
modNames <- substring(names(MEs), 3)
### 计算模块与基因的相关性矩阵
## Module Membership: 模块内基因表达与模块特征值的相关性
geneModuleMembership <- as.data.frame(cor(datExpr, MEs, use = "p"))
MMPvalue <- as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples))
names(geneModuleMembership) <- paste0("MM", modNames)
names(MMPvalue) <- paste0("p.MM", modNames)
###  计算性状与基因的相关性矩阵
## Gene significance，GS：比较样本某个基因与对应表型的相关性
## 连续型性状
# trait <- datTraits$groupNo
## 非连续型性状，需转为0-1矩阵, 已存于design中
trait <- as.data.frame(design[,choose_group])
geneTraitSignificance <- as.data.frame(cor(datExpr,trait,use = "p"))
GSPvalue <- as.data.frame(corPvalueStudent(as.matrix(geneTraitSignificance),nSamples))
names(geneTraitSignificance) <- paste0("GS")
names(GSPvalue) <- paste0("GS")
### 可视化基因与模块、表型的相关性.
#selectModule<-c("blue","green","purple","grey")  ##可以选择自己想要的模块
selectModule <- modNames  ## 全部模块批量作图
pdf("D:\\metabolic network\\转录组\\step4_gene-Module-trait-significance_stage.pdf",width=7, height=1.5*ncol(MEs))
par(mfrow=c(ceiling(length(selectModule)/2),2)) #批量作图开始
for(module in selectModule){
column <- match(module,selectModule)
print(module)
moduleGenes <- moduleColors==module
verboseScatterplot(abs(geneModuleMembership[moduleGenes, column]),
abs(geneTraitSignificance[moduleGenes, 1]),
xlab = paste("Module Membership in", module, "module"),
ylab = "Gene significance for trait",
main = paste("Module membership vs. gene significance\n"),
cex.main = 1.2, cex.lab = 1.2, cex.axis = 1.2, col = module)
}
dev.off()
}
View(textMatrix_top10)
View(textMatrix_NASH)
View(moduleTraitCor_top10)
View(moduleTraitCor)
View(moduleTraitCor_top10)
View(moduleTraitCor_top10)
View(moduleTraitCor_top10)
if(T){
modNames <- substring(names(MEs), 3)
### 计算模块与基因的相关性矩阵
## Module Membership: 模块内基因表达与模块特征值的相关性
geneModuleMembership <- as.data.frame(cor(datExpr, MEs, use = "p"))
MMPvalue <- as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples))
names(geneModuleMembership) <- paste0("MM", modNames)
names(MMPvalue) <- paste0("p.MM", modNames)
###  计算性状与基因的相关性矩阵
## Gene significance，GS：比较样本某个基因与对应表型的相关性
## 连续型性状
# trait <- datTraits$groupNo
## 非连续型性状，需转为0-1矩阵, 已存于design中
trait <- as.data.frame(design[,choose_group])
geneTraitSignificance <- as.data.frame(cor(datExpr,trait,use = "p"))
GSPvalue <- as.data.frame(corPvalueStudent(as.matrix(geneTraitSignificance),nSamples))
names(geneTraitSignificance) <- paste0("GS")
names(GSPvalue) <- paste0("GS")
modNames=rownames(moduleTraitCor_top10)
### 可视化基因与模块、表型的相关性.
#selectModule<-c("blue","green","purple","grey")  ##可以选择自己想要的模块
selectModule <- modNames  ## 全部模块批量作图
pdf("D:\\metabolic network\\转录组\\step4_gene-Module-trait-significance_stage.pdf",width=7, height=1.5*ncol(MEs))
par(mfrow=c(ceiling(length(selectModule)/2),2)) #批量作图开始
for(module in selectModule){
column <- match(module,selectModule)
print(module)
moduleGenes <- moduleColors==module
verboseScatterplot(abs(geneModuleMembership[moduleGenes, column]),
abs(geneTraitSignificance[moduleGenes, 1]),
xlab = paste("Module Membership in", module, "module"),
ylab = "Gene significance for trait",
main = paste("Module membership vs. gene significance\n"),
cex.main = 1.2, cex.lab = 1.2, cex.axis = 1.2, col = module)
}
dev.off()
}
data <- readRDS("gene_expression.rds")
data <- readRDS("D:\\下载\\gene_expression.rds")
data <- readRDS("D:\\下载\\Gene_expression_profiles.rds")
View(data)
if (class(data) == "Seurat") {
library(Seurat)
expression_matrix <- GetAssayData(data, slot = "data")  # 标准化数据
} else if (class(data) == "SingleCellExperiment") {
library(SingleCellExperiment)
expression_matrix <- logcounts(data)
} else if (is.matrix(data) || is.data.frame(data)) {
expression_matrix <- data
} else {
stop("Unsupported object type")
}
if (class(data) == "Seurat") {
library(Seurat)
expression_matrix <- GetAssayData(data, slot = "data")  # 标准化数据
} else if (class(data) == "SingleCellExperiment") {
library(SingleCellExperiment)
expression_matrix <- logcounts(data)
} else if (is.matrix(data) || is.data.frame(data)) {
expression_matrix <- data
} else {
stop("Unsupported object type")
}
View(data)
View(data)
View(data)
# 读取 RDS 文件
data <- readRDS("D:\\下载\\Gene_expression_profiles.rds")
# 处理不同类型对象
if (class(data) == "Seurat") {
library(Seurat)
expression_matrix <- GetAssayData(data, slot = "data")  # 标准化数据
} else if (class(data) == "SingleCellExperiment") {
library(SingleCellExperiment)
expression_matrix <- logcounts(data)
} else if (is.matrix(data) || is.data.frame(data)) {
expression_matrix <- data
} else {
stop("Unsupported object type")
}
print(class(data))
# 详细结构信息
str(data)
if (inherits(data, "dgCMatrix")) {
# 转换为普通矩阵（注意：大型矩阵可能占用高内存）
dense_matrix <- as.matrix(data)
# 保存为 CSV（保留行列名）
write.csv(dense_matrix, "gene_expression_dense.csv")
# 或保存为稀疏格式（推荐用于大型数据）
writeMM(data, "gene_expression_sparse.mtx")          # 矩阵内容
writeLines(rownames(data), "gene_expression_rows.txt")  # 基因名
writeLines(colnames(data), "gene_expression_cols.txt")  # 样本名
} else {
stop("对象不是 dgCMatrix")
}
# 读取 RDS 文件
library(Matrix)
if (inherits(data, "dgCMatrix")) {
# 转换为普通矩阵（注意：大型矩阵可能占用高内存）
dense_matrix <- as.matrix(data)
# 保存为 CSV（保留行列名）
write.csv(dense_matrix, "D:\\下载\\gene_expression_dense.csv")
# 或保存为稀疏格式（推荐用于大型数据）
writeMM(data, "D:\\下载\\gene_expression_sparse.mtx")          # 矩阵内容
writeLines(rownames(data), "gene_expression_rows.txt")  # 基因名
writeLines(colnames(data), "gene_expression_cols.txt")  # 样本名
} else {
stop("对象不是 dgCMatrix")
}
if (inherits(data, "dgCMatrix")) {
# 转换为普通矩阵（注意：大型矩阵可能占用高内存）
dense_matrix <- as.matrix(data)
# 保存为 CSV（保留行列名）
# 或保存为稀疏格式（推荐用于大型数据）
writeMM(data, "D:\\下载\\gene_expression_sparse.mtx")          # 矩阵内容
writeLines(rownames(data), "D:\\下载\\gene_expression_rows.txt")  # 基因名
writeLines(colnames(data), "D:\\下载\\gene_expression_cols.txt")  # 样本名
} else {
stop("对象不是 dgCMatrix")
}
data <- readRDS("D:\\下载\\Targets_of_perturbagens.rds")
View(data)
data <- readRDS("D:\\下载\\Transcriptional_responses.rds")
View(data)
shiny::runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
load(file = "D:\\metabolic network\\转录组\\step3_genes_modules.Rdata")
## 模块与表型的相关性热图
if(T){
datTraits_1$group <- as.factor(datTraits_1$group)
design <- model.matrix(~0+datTraits_1$group)
colnames(design) <- levels(datTraits_1$group) #get the group
MES0 <- moduleEigengenes(datExpr,moduleColors)$eigengenes  #Calculate module eigengenes.
MEs <- orderMEs(MES0)  #Put close eigenvectors next to each other
moduleTraitCor <- cor(MEs,design,use = "p")
moduleTraitPvalue <- corPvalueStudent(moduleTraitCor,nSamples)
textMatrix <- paste0(signif(moduleTraitCor,2),"\n(",
signif(moduleTraitPvalue,1),")")
dim(textMatrix) <- dim(moduleTraitCor)
pdf("D:\\metabolic network\\转录组\\step4_Module-trait-relationship_heatmap_Stage_NEW1.pdf",
width = 2*length(colnames(design)),
height = 0.6*length(names(MEs)) )
par(mar=c(5, 9, 3, 3)) #留白：下、左、上、右
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = colnames(design),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = F,
colors = blueWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = F,
cex.text = 0.5,
zlim = c(-1,1),
main = "Module-trait relationships")
dev.off()
save(design, file = "D:\\metabolic network\\转录组\\step4_design.Rdata")
}
# 读取FPKM数据
file_path <- 'D:\\metabolic network\\转录组\\Wgcna\\TPM_GSE126848.txt'
fpkm_data <- read.csv(file_path, sep='\t',row.names = 1)
# log2转换数据
fpkm_log2 <- fpkm_data %>%
mutate(across(everything(), ~ log2(. + 1)))
#MAD_data <- fpkm_log2[order(apply(fpkm_log2,1,mad), decreasing = T)[1:5000],]
#读取分组情况
file_path <- 'D:\\metabolic network\\转录组\\Wgcna\\condition.csv'
datTraits <- read.csv(file_path, sep=',',row.names = 1)
datExpr0 <- as.data.frame(t(fpkm_log2))
### 判断数据质量--缺失值
gsg <- goodSamplesGenes(datExpr0,verbose = 3)
gsg$allOK
if (!gsg$allOK){
# Optionally, print the gene and sample names that were removed:
if (sum(!gsg$goodGenes)>0)
printFlush(paste("Removing genes:", paste(names(datExpr0)[!gsg$goodGenes],
collapse = ", ")));
if (sum(!gsg$goodSamples)>0)
printFlush(paste("Removing samples:",
paste(rownames(datExpr0)[!gsg$goodSamples], collapse = ", ")));
# Remove the offending genes and samples from the data:
datExpr0 = datExpr0[gsg$goodSamples, gsg$goodGenes]
}
gsg <- goodSamplesGenes(datExpr0,verbose = 3)
gsg$allOK
if(T){
# 针对样本做聚类树
sampleTree <- hclust(dist(datExpr0), method = "average")
par(mar = c(0,5,2,0))
plot(sampleTree, main = "Sample clustering", sub="", xlab="", cex.lab = 2,
cex.axis = 1, cex.main = 1, cex.lab = 1)
## 若样本有性状、表型，可以添加对应颜色，查看是否聚类合理
sample_colors <- numbers2colors(as.numeric(factor(datTraits$group)),
colors = rainbow(length(table(datTraits$group))),
signed = FALSE)
## 绘制样品的系统聚类树及对应性状
par(mar = c(1,4,3,1), cex = 0.8)
# 使用适当的宽度和高度设置图形设备
png("D:\\metabolic network\\转录组\\step1_Sample dendrogram and trait_fibrosis_stage_GSE126848.png",
width = 16, height = 8, units = "in", res = 300)
plotDendroAndColors(sampleTree, sample_colors,
groupLabels = "trait",
cex.dendroLabels = 0.8,
marAll = c(1, 4, 3, 1),
cex.rowText = 0.01,
main = "Sample dendrogram and trait" )
## Plot a line to show the cut
# abline(h = 23500, col = "red") # 根据实际情况而定
dev.off()
}
##若存在显著离群点；剔除掉
if(T){
clust <- cutreeStatic(sampleTree, cutHeight = 100, minSize = 10) # cutHeight根据实际情况而定
table(clust)
keepSamples <- (clust==1)
datExpr_1 <- datExpr0[keepSamples, ]
datTraits_1 <- datTraits[keepSamples,]
dim(datExpr_1)
}
datTraits_1$group <- as.factor(datTraits_1$group)
design <- model.matrix(~0 + datTraits_1$group)
colnames(design) <- levels(datTraits_1$group)  # 获取组别信息
MES0 <- moduleEigengenes(datExpr, moduleColors)$eigengenes  # 计算模块特征基因
MES0 <- moduleEigengenes(datExpr0, moduleColors)$eigengenes  # 计算模块特征基因
MEs <- orderMEs(MES0)  # 将相近的特征基因排在一起
# 计算模块与表型的相关性和P值
moduleTraitCor <- cor(MEs, design, use = "p")
datExpr <-  datExpr_1
MES0 <- moduleEigengenes(datExpr_1, moduleColors)$eigengenes  # 计算模块特征基因
MEs <- orderMEs(MES0)  # 将相近的特征基因排在一起
# 计算模块与表型的相关性和P值
moduleTraitCor <- cor(MEs, design, use = "p")
moduleTraitPvalue <- corPvalueStudent(moduleTraitCor, nSamples)
nSamples=nrow(datExpr)
moduleTraitPvalue <- corPvalueStudent(moduleTraitCor, nSamples)
# 将相关性和P值组合成文本矩阵
textMatrix <- paste0(signif(moduleTraitCor, 2), "\n(", signif(moduleTraitPvalue, 1), ")")
dim(textMatrix) <- dim(moduleTraitCor)
View(textMatrix)
# 提取与 NASH 相关的列
nashIndex <- which(colnames(design) == "NASH")
moduleTraitCor_NASH <- moduleTraitCor[, nashIndex, drop = FALSE]
View(moduleTraitPvalue)
View(textMatrix)
runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
# 对模块按与 NASH 的相关性绝对值排序，选择排名前10的模块
topModules <- order(abs(moduleTraitCor_NASH), decreasing = TRUE)[1:10]
View(moduleTraitCor_NASH)
runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
module_order <- order(-abs(moduleTraitCor[,1]))
selectModule <- colnames(moduleTraitCor)[module_order[1:10]]
View(moduleTraitCor)
View(moduleTraitCor)
moduleTraitCor[module_order[1:10]]
colnames(moduleTraitCor[module_order[1:10]])
rownames(moduleTraitCor)
rownames(moduleTraitCor)[module_order[1:10]]
runApp('D:/文章/RORgt/APP/NASH-Predictor')
module_order <- order(-abs(moduleTraitCor[,1]))
selectModule <- rownames(moduleTraitCor)[module_order[1:10]]
par(mfrow=c(ceiling(length(selectModule)/2),2)) #批量作图开始
for(module in selectModule){
column <- match(module,selectModule)
print(module)
moduleGenes <- moduleColors==module
verboseScatterplot(abs(geneModuleMembership[moduleGenes, column]),
abs(geneTraitSignificance[moduleGenes, 1]),
xlab = paste("Module Membership in", module, "module"),
ylab = "Gene significance for trait",
main = paste("Module membership vs. gene significance\n"),
cex.main = 1.2, cex.lab = 1.2, cex.axis = 1.2, col = module)
}
### 计算模块与基因的相关性矩阵
## Module Membership: 模块内基因表达与模块特征值的相关性
geneModuleMembership <- as.data.frame(cor(datExpr, MEs, use = "p"))
MMPvalue <- as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples))
names(geneModuleMembership) <- paste0("MM", modNames)
modNames <- substring(names(MEs), 3)
names(geneModuleMembership) <- paste0("MM", modNames)
names(MMPvalue) <- paste0("p.MM", modNames)
for(module in selectModule){
column <- match(module,selectModule)
print(module)
moduleGenes <- moduleColors==module
verboseScatterplot(abs(geneModuleMembership[moduleGenes, column]),
abs(geneTraitSignificance[moduleGenes, 1]),
xlab = paste("Module Membership in", module, "module"),
ylab = "Gene significance for trait",
main = paste("Module membership vs. gene significance\n"),
cex.main = 1.2, cex.lab = 1.2, cex.axis = 1.2, col = module)
}
geneTraitSignificance <- as.data.frame(cor(datExpr,trait,use = "p"))
###  计算性状与基因的相关性矩阵
## Gene significance，GS：比较样本某个基因与对应表型的相关性
## 连续型性状
# trait <- datTraits$groupNo
## 非连续型性状，需转为0-1矩阵, 已存于design中
trait <- as.data.frame(design[,choose_group])
geneTraitSignificance <- as.data.frame(cor(datExpr,trait,use = "p"))
choose_group <- "NASH"
###  计算性状与基因的相关性矩阵
## Gene significance，GS：比较样本某个基因与对应表型的相关性
## 连续型性状
# trait <- datTraits$groupNo
## 非连续型性状，需转为0-1矩阵, 已存于design中
trait <- as.data.frame(design[,choose_group])
geneTraitSignificance <- as.data.frame(cor(datExpr,trait,use = "p"))
GSPvalue <- as.data.frame(corPvalueStudent(as.matrix(geneTraitSignificance),nSamples))
names(geneTraitSignificance) <- paste0("GS")
names(GSPvalue) <- paste0("GS")
par(mfrow=c(ceiling(length(selectModule)/2),2)) #批量作图开始
for(module in selectModule){
column <- match(module,selectModule)
print(module)
moduleGenes <- moduleColors==module
verboseScatterplot(abs(geneModuleMembership[moduleGenes, column]),
abs(geneTraitSignificance[moduleGenes, 1]),
xlab = paste("Module Membership in", module, "module"),
ylab = "Gene significance for trait",
main = paste("Module membership vs. gene significance\n"),
cex.main = 1.2, cex.lab = 1.2, cex.axis = 1.2, col = module)
}
moduleGenes <- moduleColors==module
verboseScatterplot(abs(geneModuleMembership[moduleGenes, column]),
abs(geneTraitSignificance[moduleGenes, 1]),
xlab = paste("Module Membership in", module, "module"),
ylab = "Gene significance for trait",
main = paste("Module membership vs. gene significance\n"),
cex.main = 1.2, cex.lab = 1.2, cex.axis = 1.2, col = module)
geneModuleMembership[moduleGenes, column]
moduleGenes
View(geneTraitSignificance)
View(datExpr)
View(design)
View(trait)
runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
shiny::runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
shiny::runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
library(reticulate)
use_condaenv("DIGtry", required = TRUE)
use_condaenv("based", required = TRUE)
use_condaenv("base", required = TRUE)
shiny::runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
runApp('D:/文章/RORgt/APP/NASH-Predictor')
library(tidyverse)
library(WGCNA)
library(biomaRt)
library(FactoMineR)
library(factoextra)
# 读取FPKM数据
file_path <- 'D:\\文章\\RORgt\\APP\\NASH-Predictor\\test\\TPM_GSE126848.txt'
fpkm_data <- read.csv(file_path, sep='\t',row.names = 1)
# 读取FPKM数据
file_path <- 'D:\\文章\\RORgt\\APP\\NASH-Predictor\\test\\TPM_GSE126848.csv'
fpkm_data <- read.csv(file_path, sep='\t',row.names = 1)
# 模块特征分析
MEs <- moduleEigengenes(datExpr, net$colors)$eigengenes
# 设置工作目录到包根目录
setwd("D:/APP/NASHpredictor")
# 生成文档和NAMESPACE
devtools::document()
# 生成文档和NAMESPACE
devtools::document()
# 生成文档和NAMESPACE
devtools::document()
